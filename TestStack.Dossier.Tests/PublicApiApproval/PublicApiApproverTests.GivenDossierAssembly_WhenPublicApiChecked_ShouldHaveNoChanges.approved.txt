[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("DynamicProxyGenAssembly2")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleToAttribute("TestStack.Dossier.Tests")]
[assembly: System.Runtime.InteropServices.ComVisibleAttribute(false)]
[assembly: System.Runtime.InteropServices.GuidAttribute("24a139fb-b390-4f14-9be6-cf9fb354bb5d")]
[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.0", FrameworkDisplayName=".NET Framework 4")]

namespace TestStack.Dossier
{
    
    public class AddressAusEquivalence
    {
        public AddressAusEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string City() { }
        public string Company() { }
        public string Phone() { }
        public string PostCode() { }
        public string State() { }
        public string StateAbbreviation() { }
        public string Street() { }
        public string Website() { }
    }
    public class AddressUkEquivalence
    {
        public AddressUkEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string City() { }
        public string Company() { }
        public string County() { }
        public string Phone() { }
        public string PostCode() { }
        public string Street() { }
        public string Website() { }
    }
    public class AddressUsEquivalence
    {
        public AddressUsEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string City() { }
        public string Company() { }
        public string Phone() { }
        public string SocialSecurityNumber() { }
        public string State() { }
        public string StateAbbreviation() { }
        public string Street() { }
        public string Website() { }
        public string ZipCode() { }
    }
    public class AnonymousValueFixture
    {
        public AnonymousValueFixture() { }
        public TestStack.Dossier.AddressAusEquivalence AddressAus { get; }
        public TestStack.Dossier.AddressUkEquivalence AddressUk { get; }
        public TestStack.Dossier.AddressUsEquivalence AddressUs { get; }
        [System.Runtime.CompilerServices.DynamicAttribute()]
        public object Bag { get; }
        public TestStack.Dossier.ColourEquivalence Colour { get; }
        public TestStack.Dossier.CompanyEquivalence Company { get; }
        public static System.Collections.Generic.IEnumerable<TestStack.Dossier.IAnonymousValueSupplier> DefaultValueSuppliers { get; }
        public TestStack.Dossier.FinanceEquivalence Finance { get; }
        public Ploeh.AutoFixture.Fixture Fixture { get; }
        public TestStack.Dossier.GeoEquivalence Geography { get; }
        public static System.Collections.Generic.ICollection<TestStack.Dossier.IAnonymousValueSupplier> GlobalValueSuppliers { get; }
        public TestStack.Dossier.IdentifierEquivalence Identifier { get; }
        public TestStack.Dossier.InternetEquivalence Internet { get; }
        public System.Collections.Generic.ICollection<TestStack.Dossier.IAnonymousValueSupplier> LocalValueSuppliers { get; }
        public TestStack.Dossier.PersonEquivalence Person { get; }
        public Ploeh.AutoFixture.RegularExpressionGenerator RegexGenerator { get; }
        public T Get<TObject, T>(System.Linq.Expressions.Expression<System.Func<TObject, T>> property) { }
        public object Get(System.Type type, string propertyName) { }
        public TestStack.Dossier.DataSources.Dictionaries.Words Words(string dictionaryName) { }
    }
    public class Builder<T> : TestStack.Dossier.TestDataBuilder<T, TestStack.Dossier.Builder<T>>
        where T :  class
    {
        public Builder() { }
        protected override T BuildObject() { }
        public static TestStack.Dossier.Lists.ListBuilder<T, TestStack.Dossier.Builder<T>> CreateListOfSize(int size, TestStack.Dossier.Factories.IFactory factory) { }
        public static TestStack.Dossier.Builder<T> CreateNew(TestStack.Dossier.Factories.IFactory factory = null) { }
        public virtual TestStack.Dossier.Builder<T> SetUsingBuilder<TPropertyType, TPropertyBuilder>(System.Linq.Expressions.Expression<System.Func<T, TPropertyType>> property, System.Func<TPropertyBuilder, TPropertyBuilder> modifier = null)
            where TPropertyType :  class
            where TPropertyBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
        public virtual TestStack.Dossier.Builder<T> SetUsingBuilder<TPropertyType>(System.Linq.Expressions.Expression<System.Func<T, TPropertyType>> property, System.Func<TestStack.Dossier.Builder<TPropertyType>, TestStack.Dossier.Builder<TPropertyType>> modifier = null)
            where TPropertyType :  class { }
    }
    public class ColourEquivalence
    {
        public ColourEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string Hex() { }
        public string Name() { }
    }
    public class CompanyEquivalence
    {
        public CompanyEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string Industry() { }
        public string JobTitle() { }
        public string Location() { }
        public string Name() { }
    }
    public class FinanceEquivalence
    {
        public FinanceEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string CreditCardNumber() { }
        public string CreditCardType() { }
        public string Currency() { }
        public string CurrencyCode() { }
    }
    public class static FrequencyEquivalence
    {
        public static string Frequency(this TestStack.Dossier.AnonymousValueFixture fixture) { }
    }
    public class GeoEquivalence
    {
        public GeoEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string Continent() { }
        public string Country() { }
        public string CountryCode() { }
        public string Latitude() { }
        public string Longitude() { }
    }
    public interface IAnonymousValueSupplier
    {
        bool CanSupplyValue(System.Type type, string propertyName);
        object GenerateAnonymousValue(TestStack.Dossier.AnonymousValueFixture any, System.Type type, string propertyName);
    }
    public class IdentifierEquivalence
    {
        public IdentifierEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string BitcoinAddress() { }
        public string Iban() { }
        public string IpAddressV4() { }
        public string IpAddressV6() { }
        public string Isbn() { }
        public string MacAddress() { }
    }
    public class InternetEquivalence
    {
        public InternetEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string DomainCountryCodeTopLevelDomain() { }
        public string DomainName() { }
        public string DomainTopLevel() { }
        public string Url() { }
    }
    public interface ITestDataBuilder<out TObject>
        where out TObject :  class
    {
        TObject Build();
    }
    public class static LoremIpsumEquivalence
    {
        public static string LoremIpsum(this TestStack.Dossier.AnonymousValueFixture fixture) { }
    }
    public class PersonEquivalence
    {
        public PersonEquivalence(TestStack.Dossier.AnonymousValueFixture fixture) { }
        public string EmailAddress() { }
        public string Language() { }
        public string NameFirst() { }
        public string NameFirstFemale() { }
        public string NameFirstMale() { }
        public string NameFull() { }
        public string NameLast() { }
        public string NameSuffix() { }
        public string NameTitle() { }
        public string Password() { }
        public string Race() { }
        public string Username() { }
    }
    public class static PersonEquivalenceExtensions
    {
        public static string UniqueEmailAddress(this TestStack.Dossier.PersonEquivalence personEquivalence) { }
    }
    public class ProxyBuilder<T>
        where T :  class
    {
        public ProxyBuilder(System.Collections.Generic.Dictionary<string, System.Func<object>> properties) { }
        public T Build() { }
    }
    public class static ShirtSizeEquivalence
    {
        public static string ShirtSize(this TestStack.Dossier.AnonymousValueFixture fixture) { }
    }
    public abstract class TestDataBuilder<TObject, TBuilder> : TestStack.Dossier.ITestDataBuilder<TObject>
        where TObject :  class
        where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new ()
    {
        protected TestDataBuilder() { }
        public TestStack.Dossier.AnonymousValueFixture Any { get; }
        public TestStack.Dossier.Lists.ListBuilder<TObject, TBuilder> ListBuilder { get; }
        protected virtual void AlterProxy(TObject proxy) { }
        public TBuilder AsProxy() { }
        public TObject Build() { }
        protected virtual TObject BuildObject() { }
        protected TObject BuildUsing<TFactory>()
            where TFactory : TestStack.Dossier.Factories.IFactory, new () { }
        public static TestStack.Dossier.Lists.ListBuilder<TObject, TBuilder> CreateListOfSize(int size) { }
        public TValue Get<TValue>(System.Linq.Expressions.Expression<System.Func<TObject, TValue>> property) { }
        public object Get(System.Type type, string propertyName) { }
        protected virtual TChildBuilder GetChildBuilder<TChildObject, TChildBuilder>(System.Func<TChildBuilder, TChildBuilder> modifier = null)
            where TChildObject :  class
            where TChildBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
        public TValue GetOrDefault<TValue>(System.Linq.Expressions.Expression<System.Func<TObject, TValue>> property) { }
        protected bool Has<TValue>(System.Linq.Expressions.Expression<System.Func<TObject, TValue>> property) { }
        protected bool Has(string propertyName) { }
        public virtual bool IsListBuilderProxy() { }
        public virtual TBuilder Set<TValue>(System.Linq.Expressions.Expression<System.Func<TObject, TValue>> property, TValue value) { }
        public virtual TBuilder Set<TValue>(System.Linq.Expressions.Expression<System.Func<TObject, TValue>> property, System.Func<TValue> factory) { }
    }
}
namespace TestStack.Dossier.DataSources
{
    
    public abstract class DataSource<T> : TestStack.Dossier.DataSources.IDataSource<T>
    
    {
        protected DataSource(TestStack.Dossier.DataSources.Generators.IGenerator generator) { }
        protected DataSource() { }
        public System.Collections.Generic.IList<T> Data { get; }
        public TestStack.Dossier.DataSources.Generators.IGenerator Generator { get; }
        protected abstract System.Collections.Generic.IList<T> InitializeDataSource();
        public virtual T Next() { }
    }
    public interface IDataSource<T>
    
    {
        System.Collections.Generic.IList<T> Data { get; }
        TestStack.Dossier.DataSources.Generators.IGenerator Generator { get; }
        T Next();
    }
}
namespace TestStack.Dossier.DataSources.Dictionaries
{
    
    [System.ObsoleteAttribute("FileDictionarySource is deprecated, please use Words(FromDictionary) instead.")]
    public abstract class FileDictionarySource : TestStack.Dossier.DataSources.DataSource<string>
    {
        protected FileDictionarySource() { }
        protected override System.Collections.Generic.IList<string> InitializeDataSource() { }
    }
    public class FromDictionary
    {
        public const string AddressAusCity = "AddressAusCity";
        public const string AddressAusCompany = "AddressAusCompany";
        public const string AddressAusPhone = "AddressAusPhone";
        public const string AddressAusPostCode = "AddressAusPostCode";
        public const string AddressAusState = "AddressAusState";
        public const string AddressAusStateAbbreviation = "AddressAusStateAbbreviation";
        public const string AddressAusStreet = "AddressAusStreet";
        public const string AddressAusWebsite = "AddressAusWebsite";
        public const string AddressUkCity = "AddressUKCity";
        public const string AddressUkCompany = "AddressUKCompany";
        public const string AddressUkCounty = "AddressUKCounty";
        public const string AddressUkPhone = "AddressUKPhone";
        public const string AddressUkPostCode = "AddressUKPostCode";
        public const string AddressUkStreet = "AddressUKStreet";
        public const string AddressUkWebsite = "AddressUKWebsite";
        public const string AddressUsCity = "AddressUSCity";
        public const string AddressUsCompany = "AddressUSCompany";
        public const string AddressUsPhone = "AddressUSPhone";
        public const string AddressUsSocialSecurityNumber = "AddressUSSocialSecurityNumber";
        public const string AddressUsState = "AddressUSState";
        public const string AddressUsStateAbbreviation = "AddressUSStateAbbreviation";
        public const string AddressUsStreet = "AddressUSStreet";
        public const string AddressUsWebsite = "AddressUSWebsite";
        public const string AddressUsZipCode = "AddressUSZipCode";
        public const string ColourHex = "ColourHex";
        public const string ColourName = "ColourName";
        public const string CompanyIndustry = "CompanyIndustry";
        public const string CompanyJobTitle = "CompanyJobTitle";
        public const string CompanyLocation = "CompanyLocation";
        public const string CompanyName = "CompanyName";
        public const string FinanceCreditCardNumber = "FinanceCreditCardNumber";
        public const string FinanceCreditCardType = "FinanceCreditCardType";
        public const string FinanceCurrency = "FinanceCurrency";
        public const string FinanceCurrencyCode = "FinanceCurrencyCode";
        public const string Frequency = "Frequency";
        public const string GeoContinent = "GeoContinent";
        public const string GeoCountry = "GeoCountry";
        public const string GeoCountryCode = "GeoCountryCode";
        public const string GeoLatitude = "GeoLatitude";
        public const string GeoLongitude = "GeoLongitude";
        public const string IdentifierBitcoinAddress = "IdentifierBitcoinAddress";
        public const string IdentifierIban = "IdentifierIBAN";
        public const string IdentifierIpAddressV4 = "IdentifierIPAddressV4";
        public const string IdentifierIpAddressV6 = "IdentifierIPAddressV6";
        public const string IdentifierIsbn = "IdentifierISBN";
        public const string IdentifierMacAddress = "IdentifierMacAddress";
        public const string InternetDomainCountryCodeTopLevelDomain = "InternetDomainCountryCodeTopLevelDomain";
        public const string InternetDomainName = "InternetDomainName";
        public const string InternetDomainTopLevel = "InternetDomainTopLevel";
        public const string InternetUrl = "InternetURL";
        public const string LoremIpsum = "LoremIpsum";
        public const string PersonEmailAddress = "PersonEmailAddress";
        public const string PersonLanguage = "PersonLanguage";
        public const string PersonNameFirst = "PersonNameFirst";
        public const string PersonNameFirstFemale = "PersonNameFirstFemale";
        public const string PersonNameFirstMale = "PersonNameFirstMale";
        public const string PersonNameFull = "PersonNameFull";
        public const string PersonNameLast = "PersonNameLast";
        public const string PersonNameSuffix = "PersonNameSuffix";
        public const string PersonNameTitle = "PersonNameTitle";
        public const string PersonPassword = "PersonPassword";
        public const string PersonRace = "PersonRace";
        public const string PersonUsername = "PersonUsername";
        public const string ShirtSize = "ShirtSize";
        public FromDictionary() { }
    }
    public class Words : TestStack.Dossier.DataSources.DataSource<string>
    {
        public Words(string dictionaryName) { }
        protected override System.Collections.Generic.IList<string> InitializeDataSource() { }
    }
}
namespace TestStack.Dossier.DataSources.Generators
{
    
    public interface IGenerator
    {
        int ListSize { get; set; }
        int StartIndex { get; set; }
        int Generate();
    }
    public class RandomGenerator : TestStack.Dossier.DataSources.Generators.IGenerator
    {
        public RandomGenerator() { }
        public RandomGenerator(int startIndex, int listSize) { }
        public int ListSize { get; set; }
        public int StartIndex { get; set; }
        public int Generate() { }
    }
    public class SequentialGenerator : TestStack.Dossier.DataSources.Generators.IGenerator
    {
        public SequentialGenerator() { }
        public SequentialGenerator(int startIndex, int listSize, bool listShouldBeUnique = False) { }
        public bool ListShouldBeUnique { get; }
        public int ListSize { get; set; }
        public int StartIndex { get; set; }
        public int Generate() { }
    }
}
namespace TestStack.Dossier.DataSources.Geography
{
    
    [System.ObsoleteAttribute("GeoContinentSource is deprecated, please use Words(FromDictionary.GeoContinent) i" +
        "nstead.")]
    public class GeoContinentSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public GeoContinentSource() { }
    }
    [System.ObsoleteAttribute("GeoCountryCodeSource is deprecated, please use Words(FromDictionary.GeoCountryCod" +
        "e) instead.")]
    public class GeoCountryCodeSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public GeoCountryCodeSource() { }
    }
    [System.ObsoleteAttribute("GeoCountrySource is deprecated, please use Words(FromDictionary.GeoCountry) inste" +
        "ad.")]
    public class GeoCountrySource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public GeoCountrySource() { }
    }
    [System.ObsoleteAttribute("GeoLatitudeSource is deprecated, please use Words(FromDictionary.GeoLatitude) ins" +
        "tead.")]
    public class GeoLatitudeSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public GeoLatitudeSource() { }
    }
    [System.ObsoleteAttribute("GeoLongitudeSource is deprecated, please use Words(FromDictionary.GeoLongitude) i" +
        "nstead.")]
    public class GeoLongitudeSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public GeoLongitudeSource() { }
    }
}
namespace TestStack.Dossier.DataSources.Person
{
    
    [System.ObsoleteAttribute("PersonEmailAddressSource is deprecated, please use Words(FromDictionary.PersonEma" +
        "ilAddress) instead.")]
    public class PersonEmailAddressSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonEmailAddressSource() { }
        public PersonEmailAddressSource(TestStack.Dossier.DataSources.Generators.IGenerator generator) { }
    }
    [System.ObsoleteAttribute("PersonLanguageSource is deprecated, please use Words(FromDictionary.PersonLanguag" +
        "e) instead.")]
    public class PersonLanguageSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonLanguageSource() { }
    }
    [System.ObsoleteAttribute("PersonNameFirstFemaleSource is deprecated, please use Words(FromDictionary.Person" +
        "NameFirstFemale) instead.")]
    public class PersonNameFirstFemaleSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonNameFirstFemaleSource() { }
    }
    [System.ObsoleteAttribute("PersonNameFirstMaleSource is deprecated, please use Words(FromDictionary.PersonNa" +
        "meFirstMale) instead.")]
    public class PersonNameFirstMaleSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonNameFirstMaleSource() { }
    }
    [System.ObsoleteAttribute("PersonNameFirstSource is deprecated, please use Words(FromDictionary.PersonNameFi" +
        "rst) instead.")]
    public class PersonNameFirstSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonNameFirstSource() { }
    }
    [System.ObsoleteAttribute("PersonNameFullSource is deprecated, please use Words(FromDictionary.PersonNameFul" +
        "l) instead.")]
    public class PersonNameFullSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonNameFullSource() { }
    }
    [System.ObsoleteAttribute("PersonNameLastSource is deprecated, please use Words(FromDictionary.PersonNameLas" +
        "t) instead.")]
    public class PersonNameLastSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonNameLastSource() { }
    }
    [System.ObsoleteAttribute("PersonNameSuffixSource is deprecated, please use Words(FromDictionary.PersonNameS" +
        "uffix) instead.")]
    public class PersonNameSuffixSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonNameSuffixSource() { }
    }
    [System.ObsoleteAttribute("PersonNameTitleSource is deprecated, please use Words(FromDictionary.PersonNameTi" +
        "tle) instead.")]
    public class PersonNameTitleSource : TestStack.Dossier.DataSources.Dictionaries.FileDictionarySource
    {
        public PersonNameTitleSource() { }
    }
}
namespace TestStack.Dossier.DataSources.Picking
{
    
    public class Pick
    {
        public Pick() { }
        public static TestStack.Dossier.DataSources.Picking.RandomItemSource<T> RandomItemFrom<T>(System.Collections.Generic.IList<T> list) { }
        public static TestStack.Dossier.DataSources.Picking.RepeatingSequenceSource<T> RepeatingSequenceFrom<T>(System.Collections.Generic.IList<T> list) { }
    }
    public class RandomItemSource<T> : TestStack.Dossier.DataSources.DataSource<T>
    
    {
        public RandomItemSource(System.Collections.Generic.IList<T> list) { }
        protected override System.Collections.Generic.IList<T> InitializeDataSource() { }
    }
    public class RepeatingSequenceSource<T> : TestStack.Dossier.DataSources.DataSource<T>
    
    {
        public RepeatingSequenceSource(System.Collections.Generic.IList<T> list) { }
        protected override System.Collections.Generic.IList<T> InitializeDataSource() { }
    }
}
namespace TestStack.Dossier.EquivalenceClasses
{
    
    public class static EnumEquivalenceClasses
    {
        public static TEnum Except<TEnum>(this TestStack.Dossier.AnonymousValueFixture fixture, params TEnum[] except)
            where TEnum :  struct, System.IComparable, System.IFormattable, System.IConvertible { }
        public static TEnum Of<TEnum>(this TestStack.Dossier.AnonymousValueFixture fixture)
            where TEnum :  struct, System.IComparable, System.IFormattable, System.IConvertible { }
    }
    public class static IntegerEquivalenceClasses
    {
        public static int IntegerExcept(this TestStack.Dossier.AnonymousValueFixture fixture, params int[] exceptFor) { }
        public static int NegativeInteger(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        public static int PositiveInteger(this TestStack.Dossier.AnonymousValueFixture fixture) { }
    }
    public class static StringEquivalenceClasses
    {
        public static string String(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        public static string StringEndingWith(this TestStack.Dossier.AnonymousValueFixture fixture, string suffix) { }
        public static string StringMatching(this TestStack.Dossier.AnonymousValueFixture fixture, string regexPattern) { }
        public static string StringOfLength(this TestStack.Dossier.AnonymousValueFixture fixture, int length) { }
        public static string StringStartingWith(this TestStack.Dossier.AnonymousValueFixture fixture, string prefix) { }
    }
}
namespace TestStack.Dossier.EquivalenceClasses.Geo
{
    
    public class static GeographyEquivalenceClassescs
    {
        [System.ObsoleteAttribute("Continent is deprecated, please use Geography.Continent instead.")]
        public static string Continent(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("Country is deprecated, please use Geography.Country instead.")]
        public static string Country(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("CountryCode is deprecated, please use Geography.CountryCode instead.")]
        public static string CountryCode(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("Latitude is deprecated, please use Geography.Latitude instead.")]
        public static string Latitude(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("Longitude is deprecated, please use Geography.Longitude instead.")]
        public static string Longitude(this TestStack.Dossier.AnonymousValueFixture fixture) { }
    }
}
namespace TestStack.Dossier.EquivalenceClasses.Person
{
    
    public class static PersonEquivalenceClasses
    {
        [System.ObsoleteAttribute("EmailAddress is deprecated, please use Person.EmailAddress instead.")]
        public static string EmailAddress(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("FemaleFirstName is deprecated, please use Person.NameFirstFemale instead.")]
        public static string FemaleFirstName(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("FirstName is deprecated, please use Person.NameFirst instead.")]
        public static string FirstName(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("FullName is deprecated, please use Person.NameFull instead.")]
        public static string FullName(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("Language is deprecated, please use Person.Language instead.")]
        public static string Language(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("LastName is deprecated, please use Person.NameLast instead.")]
        public static string LastName(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("MaleFirstName is deprecated, please use Person.NameFirstMale instead.")]
        public static string MaleFirstName(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("Suffix is deprecated, please use Person.NameSuffix instead.")]
        public static string Suffix(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("Title is deprecated, please use Person.Title instead.")]
        public static string Title(this TestStack.Dossier.AnonymousValueFixture fixture) { }
        [System.ObsoleteAttribute("UniqueEmailAddress is deprecated, please use Person.UniqueEmailAddress instead.")]
        public static string UniqueEmailAddress(this TestStack.Dossier.AnonymousValueFixture fixture) { }
    }
}
namespace TestStack.Dossier.Factories
{
    
    public class AllPropertiesFactory : TestStack.Dossier.Factories.CallConstructorFactory
    {
        public AllPropertiesFactory() { }
        public override TObject BuildObject<TObject, TBuilder>(TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
    }
    public class AutoFixtureFactory : TestStack.Dossier.Factories.IFactory
    {
        public AutoFixtureFactory() { }
        public TObject BuildObject<TObject, TBuilder>(TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
    }
    public class CallConstructorFactory : TestStack.Dossier.Factories.IFactory
    {
        public CallConstructorFactory() { }
        public virtual TObject BuildObject<TObject, TBuilder>(TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
    }
    public interface IFactory
    {
        TObject BuildObject<TObject, TBuilder>(TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new ();
    }
    public class PublicPropertySettersFactory : TestStack.Dossier.Factories.CallConstructorFactory
    {
        public PublicPropertySettersFactory() { }
        public override TObject BuildObject<TObject, TBuilder>(TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
    }
}
namespace TestStack.Dossier.Lists
{
    
    public class ListBuilder<TObject, TBuilder>
        where TObject :  class
        where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new ()
    {
        public TBuilder All() { }
        public System.Collections.Generic.IList<TObject> BuildList() { }
        public System.Collections.Generic.IEnumerable<TBuilder> GetBuilders() { }
        public TBuilder TheFirst(int howMany) { }
        public TBuilder TheLast(int howMany) { }
        public TBuilder TheNext(int howMany) { }
        public TBuilder ThePrevious(int howMany) { }
        public TestStack.Dossier.Lists.ListBuilder<TObject, TBuilder> With(System.Func<TBuilder, TBuilder> modifier) { }
    }
    public class static ListBuilderExtensions
    {
        public static TBuilder All<TObject, TBuilder>(this TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
        public static System.Collections.Generic.IList<TObject> BuildList<TObject, TBuilder>(this TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
        public static TBuilder TheFirst<TObject, TBuilder>(this TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder, int howMany)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
        public static TBuilder TheLast<TObject, TBuilder>(this TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder, int howMany)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
        public static TBuilder TheNext<TObject, TBuilder>(this TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder, int howMany)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
        public static TBuilder ThePrevious<TObject, TBuilder>(this TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder, int howMany)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
        public static TestStack.Dossier.Lists.ListBuilder<TObject, TBuilder> With<TObject, TBuilder>(this TestStack.Dossier.TestDataBuilder<TObject, TBuilder> builder, System.Func<TBuilder, TBuilder> modifier)
            where TObject :  class
            where TBuilder : TestStack.Dossier.TestDataBuilder<, >, new () { }
    }
}
namespace TestStack.Dossier.Suppliers
{
    
    public class DefaultEmailValueSupplier : TestStack.Dossier.IAnonymousValueSupplier
    {
        public DefaultEmailValueSupplier() { }
        public bool CanSupplyValue(System.Type type, string propertyName) { }
        public object GenerateAnonymousValue(TestStack.Dossier.AnonymousValueFixture any, System.Type type, string propertyName) { }
    }
    public class DefaultFirstNameValueSupplier : TestStack.Dossier.IAnonymousValueSupplier
    {
        public DefaultFirstNameValueSupplier() { }
        public bool CanSupplyValue(System.Type type, string propertyName) { }
        public object GenerateAnonymousValue(TestStack.Dossier.AnonymousValueFixture any, System.Type type, string propertyName) { }
    }
    public class DefaultLastNameValueSupplier : TestStack.Dossier.IAnonymousValueSupplier
    {
        public DefaultLastNameValueSupplier() { }
        public bool CanSupplyValue(System.Type type, string propertyName) { }
        public object GenerateAnonymousValue(TestStack.Dossier.AnonymousValueFixture any, System.Type type, string propertyName) { }
    }
    public class DefaultStringValueSupplier : TestStack.Dossier.IAnonymousValueSupplier
    {
        public DefaultStringValueSupplier() { }
        public bool CanSupplyValue(System.Type type, string propertyName) { }
        public object GenerateAnonymousValue(TestStack.Dossier.AnonymousValueFixture any, System.Type type, string propertyName) { }
    }
    public class DefaultValueSupplier : TestStack.Dossier.IAnonymousValueSupplier
    {
        public DefaultValueSupplier() { }
        public bool CanSupplyValue(System.Type type, string propertyName) { }
        public object GenerateAnonymousValue(TestStack.Dossier.AnonymousValueFixture any, System.Type type, string propertyName) { }
    }
    public class DefaultValueTypeValueSupplier : TestStack.Dossier.IAnonymousValueSupplier
    {
        public DefaultValueTypeValueSupplier() { }
        public bool CanSupplyValue(System.Type type, string propertyName) { }
        public object GenerateAnonymousValue(TestStack.Dossier.AnonymousValueFixture any, System.Type type, string propertyName) { }
    }
}